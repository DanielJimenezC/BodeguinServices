// <auto-generated />
using System;
using Bodeguin.Infraestructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Bodeguin.Infraestructure.Migrations
{
    [DbContext(typeof(PostgreSqlContext))]
    partial class PostgreSqlContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Bodeguin.Domain.Entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnName("create_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnName("modified_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("UrlImage")
                        .IsRequired()
                        .HasColumnName("url_image")
                        .HasColumnType("character varying(2500)")
                        .HasMaxLength(2500);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            Description = "Verduras",
                            IsActive = true,
                            ModifiedAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            Name = "Verduras",
                            UrlImage = "https://www.saccosystem.com/public/imgCat2/big/100.jpg"
                        },
                        new
                        {
                            Id = 2,
                            CreateAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            Description = "Carnes y Pollos",
                            IsActive = true,
                            ModifiedAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            Name = "Carnes y Pollos",
                            UrlImage = "https://images.jumpseller.com/store/eks-delivery/4918843/carnes-int.jpg"
                        },
                        new
                        {
                            Id = 3,
                            CreateAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            Description = "Pescados y Mariscos",
                            IsActive = true,
                            ModifiedAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            Name = "Pescados y Mariscos",
                            UrlImage = "https://c6f2y5q5.rocketcdn.me/wp-content/uploads/2017/08/proveedores-de-pescado-y-marisco-1280x640.jpg"
                        });
                });

            modelBuilder.Entity("Bodeguin.Domain.Entity.Detail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Discount")
                        .HasColumnName("discount")
                        .HasColumnType("integer");

                    b.Property<int>("InventoryId")
                        .HasColumnName("inventory_id")
                        .HasColumnType("integer");

                    b.Property<float>("Price")
                        .HasColumnName("price")
                        .HasColumnType("real");

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("integer");

                    b.Property<int>("VoucherId")
                        .HasColumnName("voucher_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.HasIndex("VoucherId");

                    b.ToTable("Details");
                });

            modelBuilder.Entity("Bodeguin.Domain.Entity.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnName("create_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<int>("MeasureUnit")
                        .HasColumnName("measure_unit")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnName("modified_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("Price")
                        .HasColumnName("price")
                        .HasColumnType("real");

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("integer");

                    b.Property<int>("StoreId")
                        .HasColumnName("store_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.ToTable("Inventories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            IsActive = true,
                            MeasureUnit = 3,
                            ModifiedAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            Price = 2.5f,
                            ProductId = 1,
                            Quantity = 20,
                            StoreId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreateAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            IsActive = true,
                            MeasureUnit = 3,
                            ModifiedAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            Price = 2.2f,
                            ProductId = 1,
                            Quantity = 18,
                            StoreId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreateAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            IsActive = true,
                            MeasureUnit = 1,
                            ModifiedAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            Price = 1.8f,
                            ProductId = 2,
                            Quantity = 5,
                            StoreId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreateAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            IsActive = true,
                            MeasureUnit = 1,
                            ModifiedAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            Price = 1.5f,
                            ProductId = 2,
                            Quantity = 1,
                            StoreId = 2
                        },
                        new
                        {
                            Id = 5,
                            CreateAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            IsActive = true,
                            MeasureUnit = 3,
                            ModifiedAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            Price = 8.9f,
                            ProductId = 3,
                            Quantity = 12,
                            StoreId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreateAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            IsActive = true,
                            MeasureUnit = 3,
                            ModifiedAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            Price = 14.2f,
                            ProductId = 4,
                            Quantity = 5,
                            StoreId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreateAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            IsActive = true,
                            MeasureUnit = 3,
                            ModifiedAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            Price = 17.8f,
                            ProductId = 4,
                            Quantity = 12,
                            StoreId = 2
                        });
                });

            modelBuilder.Entity("Bodeguin.Domain.Entity.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnName("create_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnName("modified_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            IsActive = true,
                            ModifiedAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            Name = "Efectivo"
                        },
                        new
                        {
                            Id = 2,
                            CreateAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            IsActive = true,
                            ModifiedAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            Name = "Tarjeta de Crédito/Débito"
                        });
                });

            modelBuilder.Entity("Bodeguin.Domain.Entity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnName("category_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnName("create_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnName("modified_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("UrlImage")
                        .IsRequired()
                        .HasColumnName("url_image")
                        .HasColumnType("character varying(2500)")
                        .HasMaxLength(2500);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreateAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            Description = "Manzana",
                            IsActive = true,
                            ModifiedAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            Name = "Manzana",
                            UrlImage = "https://estaticos.miarevista.es/media/cache/1140x_thumb/uploads/images/article/5e53c4125bafe801dabfb62f/comer-semillas-manzana.jpg"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreateAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            Description = "Lechuga",
                            IsActive = true,
                            ModifiedAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            Name = "Lechuga",
                            UrlImage = "https://static3.abc.es/media/bienestar/2020/09/01/lechuga-k7y--1024x512@abc.jpg"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CreateAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            Description = "Pollo",
                            IsActive = true,
                            ModifiedAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            Name = "Pollo",
                            UrlImage = "https://www.rebanando.com/cache/slideshow/31/72/02/e6/pollo1.jpg/2cb6823c975ee09b0d93e071c71c86d5.jpg"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            CreateAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            Description = "Camarones",
                            IsActive = true,
                            ModifiedAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            Name = "Camarones",
                            UrlImage = "https://img.vixdata.io/pd/jpg-large/es/sites/default/files/imj/elgranchef/C/Camarones-florentinos-3.jpg"
                        });
                });

            modelBuilder.Entity("Bodeguin.Domain.Entity.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnName("create_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnName("direction")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<double>("Latitude")
                        .HasColumnName("latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnName("longitude")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnName("modified_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Ruc")
                        .IsRequired()
                        .HasColumnName("ruc")
                        .HasColumnType("character varying(11)")
                        .HasMaxLength(11);

                    b.HasKey("Id");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            Description = "Bodega Familiar",
                            Direction = "Av. Angamos 205",
                            IsActive = true,
                            Latitude = -12.113699,
                            Longitude = -77.028981999999999,
                            ModifiedAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            Name = "Bodeguita Martinez",
                            Ruc = "20451798452"
                        },
                        new
                        {
                            Id = 2,
                            CreateAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            Description = "Bodega Familiar",
                            Direction = "Calle Lizardo Montero 299",
                            IsActive = true,
                            Latitude = -12.111534000000001,
                            Longitude = -77.028903999999997,
                            ModifiedAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            Name = "Don Pedrito",
                            Ruc = "10684751482"
                        });
                });

            modelBuilder.Entity("Bodeguin.Domain.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnName("create_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnName("direction")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasColumnName("dni")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FirstLastName")
                        .IsRequired()
                        .HasColumnName("first_lastname")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAdmin")
                        .HasColumnName("is_admin")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnName("modified_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SecondLastName")
                        .IsRequired()
                        .HasColumnName("second_lastname")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            Direction = "Calle Ciro Alegria Mz K Lote 20",
                            Dni = "72183382",
                            Email = "danieljimenezcanales@gmail.com",
                            FirstLastName = "Jimenez",
                            IsActive = true,
                            IsAdmin = false,
                            ModifiedAt = new DateTime(2020, 10, 26, 19, 21, 59, 182, DateTimeKind.Local).AddTicks(3371),
                            Name = "Daniel",
                            Password = "g2Ix3bIy9j6NrGf7zJm1Mg==",
                            SecondLastName = "Canales"
                        });
                });

            modelBuilder.Entity("Bodeguin.Domain.Entity.Voucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnName("create_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnName("modified_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnName("payment_id")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("Bodeguin.Domain.Entity.Detail", b =>
                {
                    b.HasOne("Bodeguin.Domain.Entity.Inventory", "Inventory")
                        .WithMany("Details")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bodeguin.Domain.Entity.Voucher", "Voucher")
                        .WithMany("Details")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bodeguin.Domain.Entity.Inventory", b =>
                {
                    b.HasOne("Bodeguin.Domain.Entity.Product", "Product")
                        .WithMany("Inventories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bodeguin.Domain.Entity.Store", "Store")
                        .WithMany("Inventories")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bodeguin.Domain.Entity.Product", b =>
                {
                    b.HasOne("Bodeguin.Domain.Entity.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bodeguin.Domain.Entity.Voucher", b =>
                {
                    b.HasOne("Bodeguin.Domain.Entity.PaymentType", "PaymentType")
                        .WithMany("Vouchers")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bodeguin.Domain.Entity.User", "User")
                        .WithMany("Vouchers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
